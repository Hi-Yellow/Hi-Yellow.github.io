<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[远程连接数据库用户权限问题]]></title>
    <url>%2F2019%2F01%2F16%2F%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[一、错误描述：远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx is not allowed to connect to this MySQL server 二、解决方案：该错误应该是由远程连接的用户权限问题引起的，在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’即可 。 2.1 具体解决方案：1、以权限用户root登录； mysql -u root -p 2、选择mysql库 ； mysql&gt; use mysql; 3、查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）； mysql&gt; select &#39;host&#39; from user where user=&#39;root&#39;; 4、修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址 如果这步出先错误为: “ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’ “ 由说明该记录有了，跳过这步； mysql&gt; update user set host = &#39;%&#39; where user =&#39;root&#39;; 5、刷新MySQL的系统权限相关表 ； mysql&gt; flush privileges; 6、再重新查看user表时，有修改； mysql&gt; select &#39;host&#39; from user where user=&#39;root&#39;; 7、重起mysql服务即可完成。 mysql&gt; net start mysql]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis安装]]></title>
    <url>%2F2019%2F01%2F16%2FRedis%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[一、Redis安装步骤：1、运行：redis-server.exe redis.windows.conf； 2、另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了， 切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379； 3、设置键值对 set myKey abc； 4、取出键值对 get myKey ； 二、设置Redis服务命令：1、redis-server --service-install redis.windows-service.conf --loglevel verbose]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring MVC的请求过程]]></title>
    <url>%2F2019%2F01%2F16%2FSpring%20MVC%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1、客户端发出 http 请求，只要请求形式符合 web.xml 文件中配置的 *.action 的话，就由 DispatcherServlet 来处理； 2、DispatcherServlet 再将 http 请求委托给映射器的对象来将 http 请求交给对应的 Action 来处理； 3、映射器根据客户的 http 请求，再对比 &lt;bean name=”/hello.action 如果匹配正确，再将 http 请求交给程序员写的 Action； 4、执行 Action 中的业务方法，最终返回一个名叫 ModelAndView 的对象，其中封装了向视图发送的数据和视图的逻辑名； 5、ModelAndView 对象随着响应到 DispatcherServlet 中了； 6、这时 DispatcherServlet 收到了 ModelAndView 对象，它也不知道视图逻辑名是何意，又得委托一个名叫视图解析器的对象去具体解析 ModelAndView 对象中的内容； 7、将视图解析器解析后的内容，再次交由 DispatcherServlet 核心控制器，这时核心控制器再将请求转发到具体的视图页面，取出数据，再显示给用户。]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[传能光纤链路状态检测系统]]></title>
    <url>%2F2019%2F01%2F16%2F%E4%BC%A0%E8%83%BD%E5%85%89%E7%BA%A4%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[一、javaweb知识点总结1.1 常见的java调用python脚本两种方式 通过jython.jar提供的类库实现 通过Runtime.getRuntime()开启进程来执行脚本文件 1.2 java调用python程序实现web服务功能使用Runtime.getRuntime()执行脚本文件，这种方式和cmd中使用python+文件名的命令调用python程序相同。 1、配置文件resource.properties 2、工具类TestUtils 123456789101112131415161718192021222324252627public class TestUtils &#123; public static int JavaTransferPython(String PythonPath,String FilePath) &#123; final String PYTHON_PATH = PythonPath; //python.exe可执行文件的存放路径 final String FILE_PATH = FilePath; //test.py程序的存放路径 String result=&quot;&quot;; Process proc; try &#123; String [] cmd =new String []&#123;PYTHON_PATH,FILE_PATH&#125;; proc = Runtime.getRuntime().exec(cmd);// 执行py文件 //用输入输出流来截取结果 BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream())); String line = null; while ((line = in.readLine()) != null) &#123; System.out.println(line); &#125; in.close(); proc.waitFor(); //在此需要注意的一点，java代码中的proc.waitFor()值为0表示我们调用python脚本成功，返回值为1表示调用python脚本失败，这和我们通常意义上见到的0与1定义正好相反。 return 1; //因为web工程是请求-响应式的，只有请求而无响应，会报400错误。此处请求成功，返回1。 &#125; catch (IOException e) &#123; e.printStackTrace(); return 0; //请求失败，返回0。 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); return 0; //请求失败，返回0。 &#125; &#125;&#125; 3、service层中定义方法名 public int JavaTransferPythonTest(); 4、serviceImpl实现类中实现该方法 123456789@Value(&quot;$&#123;PYTHON_PATH&#125;&quot;)private String PYTHON_PATH;@Value(&quot;$&#123;FILE_PATH&#125;&quot;)private String FILE_PATH;@Overridepublic int JavaTransferPythonTest() &#123; return TestUtils.JavaTransferPython(PYTHON_PATH,FILE_PATH); &#125; 5、action层 12345@RequestMapping(&quot;/javaTransferPythonTest&quot;)@ResponseBodypublic int JavaTransferPythonTest() &#123; return fiberLossService.JavaTransferPythonTest();&#125; 6、jsp渲染 123456789101112131415161718&#123;text:&apos;&lt;font size=&quot;4&quot; face=&quot;arial&quot; color=&quot;red&quot;&gt;&lt;b&gt;执行程序&lt;/b&gt;&lt;/font&gt;&apos;,handler: function()&#123; $.ajax(&#123; url: &quot;###/javaTransferPythonTest.action&quot;, type:&quot;POST&quot;, traditional:true, //设置为传统方式传送参数 success: function(html)&#123; if(html&gt;0)&#123; alert(&quot;恭喜您 ，操作成功，请到执行结果界面查看详细信息！&quot;); $(&quot;#dg&quot;).datagrid(&quot;reload&quot;); //重新刷新页面 &#125;else&#123; alert(&quot;对不起 ，操作失败！&quot;); &#125; &#125; &#125;);&#125; &#125; 7、jsp搜索功能 1234567891011121314151617$(&apos;#ss&apos;).searchbox(&#123; searcher:function(value,name)&#123; if(name==&apos;Id&apos;)&#123; $(&apos;#dg&apos;).datagrid(&apos;load&apos;,&#123; Id:value //&apos;%&apos;+value+&apos;%&apos;对应数据库字段为String类型,value对应数据库字段为int类型 &#125;); &#125; if(name==&apos;name&apos;)&#123; $(&apos;#dg&apos;).datagrid(&apos;load&apos;,&#123; name:value //&apos;%&apos;+value+&apos;%&apos;对应数据库字段为String类型,value对应数据库字段为int类型 &#125;); &#125; &#125;, width:250, menu:&apos;#mm&apos;, prompt:&apos;请输入搜索内容&apos; &#125;); 8、Mapper.xml 1234567&lt;select id=&quot;selectPageListUseDyc&quot; parameterType=&quot;page&quot; resultMap=&quot;###&quot; &gt; SELECT * ### &lt;where&gt; &lt;if test=&quot;paramEntity.index!=null&quot;&gt;and `index` = #&#123;paramEntity.index&#125;&lt;/if&gt; &lt;!-- 字段index和数据库的index关键字同名，故改为`index`。index字段若为int型，可以用 = 或者like；若为String型，用like--&gt; &lt;/where&gt; limit #&#123;start&#125;,#&#123;rows&#125;&lt;/select&gt; 9、SQLyog 导出数据库 注意：导出数据库是应该按图中标记所设置，以便重新导入该数据库时，无法导入！！！ 10、Tomcat做图片服务器 Tomcat作为项目服务器时因为权限问题，只能访问Tomcat文件夹下的资源。但是实际工作中如果把所有图片文件都保存在tomcat下，不利于后续工作进行。所以可以在server.xml中加入如下配置，即可访问指定的文件。 Tomcat 7.0\conf\server.xml 找到Host标签加入如下内容： 1&lt;Context docBase = &quot;D://objimgs//upload&quot; path = &quot;objimgs&quot;/&gt; path为访问名称，docBase为目标文件夹路径。所以 “http://127.0.0.1:8080/objimgs/test.jpg“ 即相当于访问服务器 “D://objimgs//upload/test.jpg” 文件。 效果如下： 2.1 python拼接图片1234567891011121314151617181920212223import PIL.Image as Imageimport os#定义图像拼接函数def image_compose(): to_image = Image.new(&apos;RGB&apos;, (IMAGE_COLUMN * IMAGE_SIZE, IMAGE_ROW * IMAGE_SIZE)) # 创建一个新图循环遍历，把每张图片按顺序粘贴到对应位置上 for y in range(1, IMAGE_ROW + 1): for x in range(1, IMAGE_COLUMN + 1): from_image = Image.open(IMAGES_PATH + image_names[IMAGE_COLUMN * (y - 1) + x - 1]).resize( (IMAGE_SIZE, IMAGE_SIZE), Image.ANTIALIAS) to_image.paste(from_image, ((x - 1) * IMAGE_SIZE, (y - 1) * IMAGE_SIZE)) return to_image.save(IMAGE_SAVE_PATH) # 保存新图IMAGES_PATH = &apos;###&apos; # 图片集地址IMAGES_FORMAT = [ &apos;.png&apos;] # 图片格式IMAGE_SIZE = 600 # 每张小图片的大小 600=1200 * 600IMAGE_ROW = 1 # 图片间隔，也就是合并成一张图后，一共有几行IMAGE_COLUMN = 2 # 图片间隔，也就是合并成一张图后，一共有几列IMAGE_SAVE_PATH = &apos;###&apos; # 图片转换后的地址# 获取图片集地址下的所有图片名称image_names = [name for name in os.listdir(IMAGES_PATH) for item in IMAGES_FORMAT if os.path.splitext(name)[1] == item]image_compose() # 调用函数 2.2 python程序导入第三方库或模块 通过快捷键Alt+Enter或者Ctrl+两次空格； 可以通过命令行——python file.py 来运行python程序，dos界面会提示却少的第三方库或模块，然后通过——pip install 模块名 命令来安装所需要的第三方库或模块。]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>java</tag>
        <tag>mysql</tag>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java垃圾回收机制]]></title>
    <url>%2F2019%2F01%2F10%2Fjava%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java面经</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中的索引]]></title>
    <url>%2F2019%2F01%2F10%2FMySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[一、索引1.1 什么是索引？索引用于快速找出在某个列中有一特定值的行，不使用索引，MySQL必须从第一条记录开始读完整个表，直到找出相关的行，表越大，查询数据所花费的时间就越多，如果表中查询的列有一个索引，MySQL能够快速到达一个位置去搜索数据文件，而不必查看所有数据，那么将会节省很大一部分时间。 1.2 为什么要建立索引？如果没有索引，那么将从表中第一条记录一条条往下遍历，直到找到该条信息为止。其中MySQL中的索引的存储类型有两种：BTREE、HASH。 也就是用树或者Hash值来存储该字段，就需要会算法的知识了。我们现在只需要知道索引的作用，功能是什么就行。 二、MySQL中索引的优点和缺点和使用原则2.1 优点： 所有的MySql列类型(字段类型)都可以被索引，也就是可以给任意字段设置索引； 大大加快数据的查询速度。 2.2 缺点： 创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加； 索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值； 当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。 2.3 使用原则：通过上面说的优点和缺点，我们应该可以知道，并不是每个字段度设置索引就好，也不是索引越多越好，而是需要自己合理的使用。 对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引； 数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果； 在一同值少的列上(字段上)不要建立索引，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，在一个字段上不同值较多可是建立索引。 三、索引的分类注意：索引是在存储引擎中实现的，也就是说不同的存储引擎，会使用不同的索引。 MyISAM和InnoDB存储引擎：只支持BTREE索引， 也就是说默认使用BTREE，不能够更换； MEMORY/HEAP存储引擎：支持HASH和BTREE索引。 3.1 索引类别单列索引(普通索引，唯一索引，主键索引)、组合索引、全文索引、空间索引、 3.1.1 单列索引一个索引只包含单个列，但一个表中可以有多个单列索引。 这里不要搞混淆了。 普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。 唯一索引：索引列中的值必须是唯一的，但是允许为空值。 主键索引：一种特殊的唯一索引，不允许有空值。 3.1.2 组合索引在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。这个如果还不明白，等后面举例讲解时在细说 3.1.3 全文索引全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”你是个大煞笔，二货 …” 通过大煞笔，可能就可以找到该条记录。这里说的是可能，因为全文索引的使用涉及了很多细节，我们只需要知道这个大概意思，如果感兴趣进一步深入使用它，那么看下面测试该索引时，会给出一个博文，供大家参考。 3.1.4 空间索引 空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。 在创建空间索引时，使用SPATIAL关键字。 要求，引擎为MyISAM，创建空间索引的列，必须将其声明为NOT NULL。]]></content>
      <categories>
        <category>Java面经</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux进程间通信（IPC）]]></title>
    <url>%2F2019%2F01%2F09%2FLinux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、进程间通信概述1.1 进程通信目的：1.1.1 传输数据：一个进程须要将它的数据发送给还有一个进程。发送的数据量在一个字节到几M字节之间 1.1.2 共享数据多个进程想要操作共享数据。一个进程对共享数据的改动，别的进程应该立马看到。 1.1.3 通知事件一个进程须要向还有一个或一组进程发送消息。通知它（它们）发生了某种事件（如进程终止时要通知父进程）。 1.1.4 资源共享多个进程之间共享相同的资源。为了作到这一点，须要内核提供锁和同步机制。 1.1.5 进程控制有些进程希望全然控制还有一个进程的运行（如Debug进程）。此时控制进程希望可以拦截还有一个进程的全部陷入和异常。并可以及时知道它的状态改变。 1.2 本地的进程间通信（IPC）4种方式A、消息传递（管道、FIFO、消息队列）B、同步（相互排斥量、条件变量、读写锁、文件和写记录锁、信号量）C、共享内存（匿名的和具名的）D、远程过程调用（Solaris门和Sun RPC） 二、linux下进程间通信的几种主要手段2.1 管道（Pipe）及有名管道（named pipe）管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制。因此。除具有管道所具有的功能外，它还同意无亲缘关系进程间的通信； 2.2 信号（Signal）信号是比較复杂的通信方式。用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上。该函数是基于BSD的，BSD为了实现可靠信号机制，又可以统一对外接口，用sigaction函数又一次实现了signal函数）。 2.3 消息（Message）队列消息队列是消息的链接表，包含Posix消息队列system V消息队列。有足够权限的进程能够向队列中加入消息。被赋予读权限的进程则能够读走队列中的消息。消息队列克服了信号承载信息量少，管道仅仅能承载无格式字节流以及缓冲区大小受限等缺点。 2.4 共享内存使得多个进程能够訪问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制执行效率较低而设计的。往往与其他通信机制，如信号量结合使用，来达到进程间的同步及相互排斥。 2.5 信号量（semaphore）主要作为进程间以及同一进程不同线程之间的同步手段。 2.6 套接口（Socket）更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但如今一般能够移植到其他类Unix系统上：Linux和System V的变种都支持套接字。 注： Linux进程间通信 管道、信号、信号量、消息队列、共享内存、套接字(socket) Linux线程间通信相互排斥量（mutex），信号量。条件变量 Windows进程间通信管道、消息队列、共享内存、信号量 （semaphore） 、套接字(socket) Windows线程间通信相互排斥量（mutex），信号量（semaphore）、临界区（critical section）、事件（event） [相关博文]: linux进程间通信(IPC)机制总结 linux基础——linux进程间通信（IPC）机制总结 Linux进程间通信 IPC机制]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令大全]]></title>
    <url>%2F2019%2F01%2F09%2Flinux%2F</url>
    <content type="text"><![CDATA[一、序言本文总结了windows系统下git面板操作的常用命令，仅供参考学习。如果需要了解更多，请自行百科。 二、常用Linux指令2.1 cd命令：$ cd [path] //path为路径名称，这只是常规语法 2.1.1 详细用法如下：$ cd /d //进入d盘$ cd d: //进入d盘$ cd D: //进入d盘$ cd /D //进入d盘$ cd .. //返回上一级目录$ cd ../ //返回上一级目录$ cd ../../ //返回上两级目录$ cd . //切换到当前目录，通常没有任何反应$ cd ./ //切换到当前目录，通常没有任何反应$ cd //不要以为看错了，确实就只有一个“cd”，它表示切换到个人主目录（类似于切换到window的桌面，但又不是桌面）$ cd - //返回上次访问目录（即倒退到上一次目录位置）$ cd /d/loushengyue/study //进入d盘中的loushengyue目录下的study目录 2.2 ls命令：$ ls //查看当前目录中的文件夹及文件$ ls -l //查看当前目录下的文件和文件夹的详细资料$ ls -a //查看当前目录中的文件夹及文件(包括隐藏文件）$ ls -la //查看当前目录下的文件和文件夹的详细资料(包括隐藏文件） 2.3 pwd命令：$ pwd //显示当前目录路径 2.4 rm命令：$ rm test.js -rf //删除当前目录下的 test.js 文件$ rm ./test.html -rf //删除当前目录下的 test.html 文件$ rm ../test.css -rf //删除上一级目录下的 test.css 文件$ rm test/ -rf //删除当前目录下的 test 文件夹$ rm tst/tt.js -rf //删除 tst 目录下的 tt.js 文件 2.5 mkdir命令：$ mkdir ./test //在当前目录下创建 test 文件夹$ mkdir ../test //在上一级目录下创建 test 文件夹$ mkdir ./test/son //在当前目录下的 test 目录下创建 son 文件夹$ mkdir ./tst1 ./tst2 //在当前目录下创建 tst1 和 tst2 文件夹 2.6 mv命令：$ mv dir new_dir //当前目录下没有 new_dir 时表示将 dir 移动到当前目录下并重命名为 new_dir, 当前目录下有 new_dir 文件夹是表示将 dir 移动到 new_dir 目录中 2.7 cp命令：$ cp test.js newtest.js //复制当前目录下的 test.js 到当前目录下并命名为 newtest.js$ cp ../test.html ./ //复制上一级目录下的 test.html 到当前目录下（注意这里是./，没有重命名） 2.8 touch命令：$ touch ./test.js //在当前目录下创建一个名为 test.js 的文件 [相关博文]: Linux常用命令大全 linux常用命令大全 Linux 常用命令大全 linux命令大全 Linux常用命令大全（非常全！！！） 这些Linux命令，让你的工作事半功倍！]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乐观锁和悲观锁]]></title>
    <url>%2F2019%2F01%2F09%2F%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java面经</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOF离群点检测]]></title>
    <url>%2F2019%2F01%2F09%2FLOF%E7%A6%BB%E7%BE%A4%E7%82%B9%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springmvc]]></title>
    <url>%2F2019%2F01%2F09%2Fspringmvc%2F</url>
    <content type="text"></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring]]></title>
    <url>%2F2019%2F01%2F09%2Fspring%2F</url>
    <content type="text"></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis]]></title>
    <url>%2F2019%2F01%2F09%2Fmybatis%2F</url>
    <content type="text"></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java排序算法]]></title>
    <url>%2F2019%2F01%2F09%2Fjava%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[一、冒泡排序1.1 快速排序的基本思想：冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 1.2 冒泡排序的示例： 1.3 冒泡排序的算法实现如下:【排序后，数组从小到大排列】123456789101112131415161718192021/** * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 * 针对所有的元素重复以上的步骤，除了最后一个。 * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 * @param numbers 需要排序的整型数组*/public static void bubbleSort(int[] numbers) &#123; int temp = 0; int size = numbers.length; for(int i = 0 ; i &lt; size-1; i ++) &#123; for(int j = 0 ;j &lt; size-1-i ; j++) &#123; if(numbers[j] &gt; numbers[j+1]) &#123; //交换两数位置 temp = numbers[j]; numbers[j] = numbers[j+1]; numbers[j+1] = temp; &#125; &#125; &#125;&#125; 二、快速排序2.1 快速排序的基本思想：通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。 2.2 快速排序的示例：2.2.1 一趟排序的过程： 2.2.2 排序的全过程： 把整个序列看做一个数组，把第零个位置看做中轴，和最后一个比，如果比它小交换，比它大不做任何处理；交换了以后再和小的那端比，比它小不交换，比他大交换。这样循环往复，一趟排序完成，左边就是比中轴小的，右边就是比中轴大的，然后再用分治法，分别对这两个独立的数组进行排序。 2.3 代码实现如下：2.3.1 查找中轴（最低位作为中轴）所在位置：12345678910111213141516171819202122/** * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置 * @param numbers 待查找数组 * @param low 开始位置 * @param high 结束位置 * @return 中轴所在位置*/public static int getMiddle(int[] numbers, int low,int high) &#123; int temp = numbers[low]; //数组的第一个作为中轴 while(low &lt; high) &#123; while(low &lt; high &amp;&amp; numbers[high] &gt; temp) &#123; high--; &#125; numbers[low] = numbers[high]; //比中轴小的记录移到低端 while(low &lt; high &amp;&amp; numbers[low] &lt; temp)&#123; low++; &#125; numbers[high] = numbers[low] ; //比中轴大的记录移到高端 &#125; numbers[low] = temp ; //中轴记录到尾 return low ; // 返回中轴的位置&#125; 2.3.2 递归形式的分治排序算法：123456789101112/** * @param numbers 带排序数组 * @param low 开始位置 * @param high 结束位置*/public static void quickSort(int[] numbers,int low,int high)&#123; if(low &lt; high)&#123; int middle = getMiddle(numbers,low,high); //将numbers数组进行一分为二 quickSort(numbers, low, middle-1); //对低字段表进行递归排序 quickSort(numbers, middle+1, high); //对高字段表进行递归排序 &#125;&#125; 2.3.3 快速排序提供方法调用：12345678/** * @param numbers 带排序数组*/public static void quick(int[] numbers)&#123; if(numbers.length &gt; 0) &#123; //查看数组是否为空 quickSort(numbers, 0, numbers.length-1); &#125;&#125; 2.4 分析：快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。 2.5 方法测试：2.5.1 打印函数：123456public static void printArr(int[] numbers) &#123; for(int i = 0 ; i &lt; numbers.length ; i ++ ) &#123; System.out.print(numbers[i] + &quot;,&quot;); &#125; System.out.println(&quot;&quot;);&#125; 2.5.2 测试：1234567891011public static void main(String[] args) &#123; int[] numbers = &#123;10,20,15,0,6,7,2,1,-5,55&#125;; System.out.print(&quot;排序前：&quot;); printArr(numbers); bubbleSort(numbers); System.out.print(&quot;冒泡排序后：&quot;); printArr(numbers); quick(numbers); System.out.print(&quot;快速排序后：&quot;); printArr(numbers);&#125; 2.5.3 结果：123排序前：10,20,15,0,6,7,2,1,-5,55,冒泡排序后：-5,0,1,2,6,7,10,15,20,55,快速排序后：-5,0,1,2,6,7,10,15,20,55, 三、选择排序3.1 基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。 3.2 实例 3.3 算法实现123456789101112131415161718192021222324/** * 选择排序算法 * 在未排序序列中找到最小元素，存放到排序序列的起始位置 * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。 * 以此类推，直到所有元素均排序完毕。 * @param numbers*/public static void selectSort(int[] numbers)&#123; int size = numbers.length; //数组长度 int temp = 0 ; //中间变量 for(int i = 0 ; i &lt; size ; i++)&#123; int k = i; //待确定的位置 //选择出应该在第i个位置的数 for(int j = size -1 ; j &gt; i ; j--)&#123; if(numbers[j] &lt; numbers[k])&#123; k = j; &#125; &#125; //交换两个数 temp = numbers[i]; numbers[i] = numbers[k]; numbers[k] = temp; &#125;&#125; 四、插入排序4.1 基本思想每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。 4.2 实例 4.3 算法实现1234567891011121314151617181920212223/** * 从第一个元素开始，该元素可以认为已经被排序 * 取出下一个元素，在已经排序的元素序列中从后向前扫描 * 如果该元素（已排序）大于新元素，将该元素移到下一位置 * 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 * 将新元素插入到该位置中 * 重复步骤2 * @param numbers 待排序数组*/ public static void insertSort(int[] numbers)&#123; int size = numbers.length; int temp = 0 ; int j = 0; for(int i = 0 ; i &lt; size ; i++)&#123; temp = numbers[i]; //假如temp比前面的值小，则将前面的值后移 for(j = i ; j &gt; 0 &amp;&amp; temp &lt; numbers[j-1] ; j --)&#123; numbers[j] = numbers[j-1]; &#125; numbers[j] = temp; &#125;&#125; 4.4 效率：时间复杂度：O（n^2）。 五、希尔算法5.1 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。 5.2 操作方法： 选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； 按增量序列个数k，对序列进行k 趟排序； 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 希尔排序的示例： 5.3 算法实现：123456789101112131415161718192021222324252627/** * 希尔排序的原理:根据需求，如果你想要结果从大到小排列，它会首先将数组进行分组，然后将较大值移到前面，较小值； * 移到后面，最后将整个数组进行插入排序，这样比起一开始就用插入排序减少了数据交换和移动的次数，可以说希尔排序是加强版的插入排序； * 拿数组5, 2, 8, 9, 1, 3，4来说，数组长度为7，当increment为3时，数组分为两个序列5，2，8和9，1，3，4，第一次排序，9和5比较，1和2比较，3和8比较，4和比其下标值小increment的数组值相比较，此例子是按照从大到小排列，所以大的会排在前面，第一次排序后数组为9, 2, 8, 5, 1, 3，4； * 第一次后increment的值变为3/2=1,此时对数组进行插入排序，实现数组从大到小排。*/public static void shellSort(int[] data)&#123; int j = 0; int temp = 0; //每次将步长缩短为原来的一半 for (int increment = data.length / 2; increment &gt; 0;increment /= 2)&#123; for (int i = increment; i &lt; data.length; i++) &#123; temp = data[i]; for (j = i; j &gt;= increment; j -= increment) &#123; if(temp &gt; data[j - increment])&#123; //如想从小到大排只需修改这里 data[j] = data[j - increment]; &#125; else&#123; break; &#125; &#125; data[j] = temp; &#125; &#125;&#125; 5.4 效率时间复杂度：O（n^2）. 六、归并排序算法6.1 基本思想：归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。 6.2 归并排序示例： 6.3 合并方法：设r[i…n]由两个有序子表r[i…m]和r[m+1…n]组成，两个子表长度分别为n-i +1、n-m。 a). j=m+1；k=i；i=i; //置两个子表的起始下标及辅助数组的起始下标；b). 若i&gt;m 或j&gt;n，转⑷ //其中一个子表已合并完，比较选取结束；c). 选取r[i]和r[j]较小的存入辅助数组rf； 如果r[i]&lt;r[j]，rf[k]=r[i]； i++； k++； 转⑵； 否则，rf[k]=r[j]； j++； k++； 转⑵ d). 将尚未处理完的子表中元素存入rf； 如果i&lt;=m，将r[i…m]存入rf[k…n] //前一子表非空； 如果j&lt;=n , 将r[j…n] 存入rf[k…n] //后一子表非空 e). 合并结束。 6.4 算法实现：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * 归并排序 * 简介:将两个（或两个以上）有序表合并成一个新的有序表 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列 * 时间复杂度为O(nlogn) * 稳定排序方式 * @param nums 待排序数组 * @return 输出有序数组*/public static int[] sort(int[] nums, int low, int high) &#123; int mid = (low + high) / 2; if (low &lt; high) &#123; // 左边 sort(nums, low, mid); // 右边 sort(nums, mid + 1, high); // 左右归并 merge(nums, low, mid, high); &#125; return nums;&#125;/** * 将数组中low到high位置的数进行排序 * @param nums 待排序数组 * @param low 待排的开始位置 * @param mid 待排中间位置 * @param high 待排结束位置*/public static void merge(int[] nums, int low, int mid, int high) &#123; int[] temp = new int[high - low + 1]; int i = low;// 左指针 int j = mid + 1;// 右指针 int k = 0; // 把较小的数先移到新数组中 while (i &lt;= mid &amp;&amp; j &lt;= high) &#123; if (nums[i] &lt; nums[j]) &#123; temp[k++] = nums[i++]; &#125; else &#123; temp[k++] = nums[j++]; &#125; &#125; // 把左边剩余的数移入数组 while (i &lt;= mid) &#123; temp[k++] = nums[i++]; &#125; // 把右边边剩余的数移入数组 while (j &lt;= high) &#123; temp[k++] = nums[j++]; &#125; // 把新数组中的数覆盖nums数组 for (int k2 = 0; k2 &lt; temp.length; k2++) &#123; nums[k2 + low] = temp[k2]; &#125;&#125; 七、堆排序算法7.1 基本思想：堆排序是一种树形选择排序，是对直接选择排序的有效改进。 堆的定义下：具有n个元素的序列 （h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二 叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。 思想：初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个 堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对 它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。 7.2 实例初始序列：46, 79, 56, 38, 40, 8 1）建堆： 2）交换，从堆中踢出最大数 3）依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。7.3 算法实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class HeapSort &#123; public static void main(String[] args) &#123; int[] a=&#123;49,38,65,97,76,13,27,49,78,34,12,64&#125;; int arrayLength=a.length; //循环建堆 for(int i=0;i&lt;arrayLength-1;i++)&#123; //建堆 buildMaxHeap(a,arrayLength-1-i); //交换堆顶和最后一个元素 swap(a,0,arrayLength-1-i); System.out.println(Arrays.toString(a)); &#125; &#125; //对data数组从0到lastIndex建大顶堆 public static void buildMaxHeap(int[] data, int lastIndex)&#123; //从lastIndex处节点（最后一个节点）的父节点开始 for(int i=(lastIndex-1)/2;i&gt;=0;i--)&#123; //k保存正在判断的节点 int k=i; //如果当前k节点的子节点存在 while(k*2+1&lt;=lastIndex)&#123; //k节点的左子节点的索引 int biggerIndex=2*k+1; //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在 if(biggerIndex&lt;lastIndex)&#123; //若果右子节点的值较大 if(data[biggerIndex]&lt;data[biggerIndex+1])&#123; //biggerIndex总是记录较大子节点的索引 biggerIndex++; &#125; &#125; //如果k节点的值小于其较大的子节点的值 if(data[k]&lt;data[biggerIndex])&#123; //交换他们 swap(data,k,biggerIndex); //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值 k=biggerIndex; &#125;else&#123; break; &#125; &#125; &#125; &#125; //交换 private static void swap(int[] data, int i, int j) &#123; int tmp=data[i]; data[i]=data[j]; data[j]=tmp; &#125; &#125; 八、各种算法的时间复杂度 [相关博文]: 八大排序算法总结与java实现]]></content>
      <categories>
        <category>Java面经</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows常用命令行]]></title>
    <url>%2F2019%2F01%2F09%2Fwindows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[1. 用set password命令：mysql -u rootmysql&gt; SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;newpass&#39;); 2. 查看端口号：netstat -ano3. 连接远程服务器：mstsc 4. 查看本机ip地址：ipconfig/all 5. 将mysql所有权赋予root账户：grant select,update,insert,delete on *.* to root@127.0.0.1 identified by &quot;root&quot;; 6. 使操作生效：flush privileges 7. 创建账户root，密码为root：create user &#39;root&#39; identified by &#39;root&#39;； 8. 打开服务：services.msc 9. 连接远端或本地ip 端口号：telnet IP 端口号Ctrl+] 回车（显示回显）]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>dos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo命令]]></title>
    <url>%2F2019%2F01%2F09%2FHexo%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1. 常用hexo命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 2. 缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 3. 组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
