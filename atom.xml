<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi-Yellow</title>
  
  <subtitle>为之则易，不为则难！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-09T14:21:45.218Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>风之行</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux进程间通信（IPC）</title>
    <link href="http://yoursite.com/2019/01/09/Linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/09/Linux进程间通信（IPC）/</id>
    <published>2019-01-09T13:52:51.000Z</published>
    <updated>2019-01-09T14:21:45.218Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、进程间通信概述"><a href="#一、进程间通信概述" class="headerlink" title="一、进程间通信概述"></a>一、进程间通信概述</h3><h4 id="1-1-进程通信目的："><a href="#1-1-进程通信目的：" class="headerlink" title="1.1 进程通信目的："></a>1.1 进程通信目的：</h4><h5 id="1-1-1-传输数据："><a href="#1-1-1-传输数据：" class="headerlink" title="1.1.1 传输数据："></a>1.1.1 传输数据：</h5><p>一个进程须要将它的数据发送给还有一个进程。发送的数据量在一个字节到几M字节之间</p><h5 id="1-1-2-共享数据"><a href="#1-1-2-共享数据" class="headerlink" title="1.1.2 共享数据"></a>1.1.2 共享数据</h5><p>多个进程想要操作共享数据。一个进程对共享数据的改动，别的进程应该立马看到。</p><h5 id="1-1-3-通知事件"><a href="#1-1-3-通知事件" class="headerlink" title="1.1.3 通知事件"></a>1.1.3 通知事件</h5><p>一个进程须要向还有一个或一组进程发送消息。通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</p><h5 id="1-1-4-资源共享"><a href="#1-1-4-资源共享" class="headerlink" title="1.1.4 资源共享"></a>1.1.4 资源共享</h5><p>多个进程之间共享相同的资源。为了作到这一点，须要内核提供锁和同步机制。</p><h5 id="1-1-5-进程控制"><a href="#1-1-5-进程控制" class="headerlink" title="1.1.5 进程控制"></a>1.1.5 进程控制</h5><p>有些进程希望全然控制还有一个进程的运行（如Debug进程）。此时控制进程希望可以拦截还有一个进程的全部陷入和异常。并可以及时知道它的状态改变。</p><h4 id="1-2-本地的进程间通信（IPC）4种方式"><a href="#1-2-本地的进程间通信（IPC）4种方式" class="headerlink" title="1.2 本地的进程间通信（IPC）4种方式"></a>1.2 本地的进程间通信（IPC）4种方式</h4><p>A、消息传递（管道、FIFO、消息队列）<br>B、同步（相互排斥量、条件变量、读写锁、文件和写记录锁、信号量）<br>C、共享内存（匿名的和具名的）<br>D、远程过程调用（Solaris门和Sun RPC）</p><h3 id="二、linux下进程间通信的几种主要手段"><a href="#二、linux下进程间通信的几种主要手段" class="headerlink" title="二、linux下进程间通信的几种主要手段"></a>二、linux下进程间通信的几种主要手段</h3><h4 id="2-1-管道（Pipe）及有名管道（named-pipe）"><a href="#2-1-管道（Pipe）及有名管道（named-pipe）" class="headerlink" title="2.1 管道（Pipe）及有名管道（named pipe）"></a>2.1 管道（Pipe）及有名管道（named pipe）</h4><p>管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制。因此。除具有管道所具有的功能外，它还同意无亲缘关系进程间的通信；</p><h4 id="2-2-信号（Signal）"><a href="#2-2-信号（Signal）" class="headerlink" title="2.2 信号（Signal）"></a>2.2 信号（Signal）</h4><p>信号是比較复杂的通信方式。用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上。该函数是基于BSD的，BSD为了实现可靠信号机制，又可以统一对外接口，用sigaction函数又一次实现了signal函数）。</p><h4 id="2-3-消息（Message）队列"><a href="#2-3-消息（Message）队列" class="headerlink" title="2.3 消息（Message）队列"></a>2.3 消息（Message）队列</h4><p>消息队列是消息的链接表，包含Posix消息队列system V消息队列。有足够权限的进程能够向队列中加入消息。被赋予读权限的进程则能够读走队列中的消息。消息队列克服了信号承载信息量少，管道仅仅能承载无格式字节流以及缓冲区大小受限等缺点。</p><h4 id="2-4-共享内存"><a href="#2-4-共享内存" class="headerlink" title="2.4 共享内存"></a>2.4 共享内存</h4><p>使得多个进程能够訪问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制执行效率较低而设计的。往往与其他通信机制，如信号量结合使用，来达到进程间的同步及相互排斥。</p><h4 id="2-5-信号量（semaphore）"><a href="#2-5-信号量（semaphore）" class="headerlink" title="2.5 信号量（semaphore）"></a>2.5 信号量（semaphore）</h4><p>主要作为进程间以及同一进程不同线程之间的同步手段。</p><h4 id="2-6-套接口（Socket）"><a href="#2-6-套接口（Socket）" class="headerlink" title="2.6 套接口（Socket）"></a>2.6 套接口（Socket）</h4><p>更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但如今一般能够移植到其他类Unix系统上：Linux和System V的变种都支持套接字。</p><p><strong>注：</strong></p><h5 id="Linux进程间通信"><a href="#Linux进程间通信" class="headerlink" title="Linux进程间通信"></a>Linux进程间通信</h5><p> 管道、信号、信号量、消息队列、共享内存、套接字(socket)</p><h5 id="Linux线程间通信"><a href="#Linux线程间通信" class="headerlink" title="Linux线程间通信"></a>Linux线程间通信</h5><p>相互排斥量（mutex），信号量。条件变量</p><h5 id="Windows进程间通信"><a href="#Windows进程间通信" class="headerlink" title="Windows进程间通信"></a>Windows进程间通信</h5><p>管道、消息队列、共享内存、信号量 （semaphore） 、套接字(socket)</p><h5 id="Windows线程间通信"><a href="#Windows线程间通信" class="headerlink" title="Windows线程间通信"></a>Windows线程间通信</h5><p>相互排斥量（mutex），信号量（semaphore）、临界区（critical section）、事件（event）</p><p><strong>[相关博文]:</strong></p><p><a href="https://blog.csdn.net/ds1130071727/article/details/78519527" target="_blank" rel="noopener">linux进程间通信(IPC)机制总结</a></p><p><a href="https://blog.csdn.net/a987073381/article/details/52006729" target="_blank" rel="noopener">linux基础——linux进程间通信（IPC）机制总结</a></p><p><a href="https://blog.csdn.net/xixihaha331/article/details/51425859" target="_blank" rel="noopener">Linux进程间通信 IPC机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;一、进程间通信概述&quot;&gt;&lt;a href=&quot;#一、进程间通信概述&quot; class=&quot;headerlink&quot; title=&quot;一、进程间通信概述&quot;&gt;&lt;/a&gt;一、进程间通信概述&lt;/h3&gt;&lt;h4 id=&quot;1-1-进程通信目的：&quot;&gt;&lt;a href=&quot;#1-1-进程通信目
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令大全</title>
    <link href="http://yoursite.com/2019/01/09/linux/"/>
    <id>http://yoursite.com/2019/01/09/linux/</id>
    <published>2019-01-09T11:57:14.000Z</published>
    <updated>2019-01-09T14:15:12.903Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h3><p>本文总结了windows系统下git面板操作的常用命令，仅供参考学习。如果需要了解更多，请自行百科。</p><h3 id="二、常用Linux指令"><a href="#二、常用Linux指令" class="headerlink" title="二、常用Linux指令"></a>二、常用Linux指令</h3><h4 id="2-1-cd命令："><a href="#2-1-cd命令：" class="headerlink" title="2.1 cd命令："></a>2.1 cd命令：</h4><p><code>$ cd [path]   //path为路径名称，这只是常规语法</code></p><h5 id="2-1-1-详细用法如下："><a href="#2-1-1-详细用法如下：" class="headerlink" title="2.1.1 详细用法如下："></a>2.1.1 详细用法如下：</h5><p><code>$ cd /d     //进入d盘</code><br><code>$ cd d:     //进入d盘</code><br><code>$ cd D:     //进入d盘</code><br><code>$ cd /D     //进入d盘</code><br><code>$ cd ..       //返回上一级目录</code><br><code>$ cd ../      //返回上一级目录</code><br><code>$ cd ../../      //返回上两级目录</code><br><code>$ cd .        //切换到当前目录，通常没有任何反应</code><br><code>$ cd ./       //切换到当前目录，通常没有任何反应</code><br><code>$ cd          //不要以为看错了，确实就只有一个“cd”，它表示切换到个人主目录（类似于切换到window的桌面，但又不是桌面）</code><br><code>$ cd -       //返回上次访问目录（即倒退到上一次目录位置）</code><br><code>$ cd /d/loushengyue/study  //进入d盘中的loushengyue目录下的study目录</code></p><h4 id="2-2-ls命令："><a href="#2-2-ls命令：" class="headerlink" title="2.2 ls命令："></a>2.2 ls命令：</h4><p><code>$ ls      //查看当前目录中的文件夹及文件</code><br><code>$ ls -l   //查看当前目录下的文件和文件夹的详细资料</code><br><code>$ ls -a   //查看当前目录中的文件夹及文件(包括隐藏文件）</code><br><code>$ ls -la  //查看当前目录下的文件和文件夹的详细资料(包括隐藏文件）</code></p><h4 id="2-3-pwd命令："><a href="#2-3-pwd命令：" class="headerlink" title="2.3 pwd命令："></a>2.3 pwd命令：</h4><p><code>$ pwd  //显示当前目录路径</code></p><h4 id="2-4-rm命令："><a href="#2-4-rm命令：" class="headerlink" title="2.4 rm命令："></a>2.4 rm命令：</h4><p><code>$ rm test.js -rf      //删除当前目录下的 test.js 文件</code><br><code>$ rm ./test.html -rf  //删除当前目录下的 test.html 文件</code><br><code>$ rm ../test.css -rf  //删除上一级目录下的 test.css 文件</code><br><code>$ rm test/ -rf        //删除当前目录下的 test 文件夹</code><br><code>$ rm tst/tt.js -rf    //删除 tst 目录下的 tt.js 文件</code></p><h4 id="2-5-mkdir命令："><a href="#2-5-mkdir命令：" class="headerlink" title="2.5 mkdir命令："></a>2.5 mkdir命令：</h4><p><code>$ mkdir ./test          //在当前目录下创建 test 文件夹</code><br><code>$ mkdir ../test         //在上一级目录下创建 test 文件夹</code><br><code>$ mkdir ./test/son      //在当前目录下的 test 目录下创建 son 文件夹</code><br><code>$ mkdir ./tst1 ./tst2   //在当前目录下创建 tst1 和 tst2 文件夹</code></p><h4 id="2-6-mv命令："><a href="#2-6-mv命令：" class="headerlink" title="2.6 mv命令："></a>2.6 mv命令：</h4><p><code>$ mv dir new_dir       //当前目录下没有 new_dir 时表示将 dir 移动到当前目录下并重命名为 new_dir, 当前目录下有 new_dir 文件夹是表示将 dir 移动到 new_dir 目录中</code></p><h4 id="2-7-cp命令："><a href="#2-7-cp命令：" class="headerlink" title="2.7 cp命令："></a>2.7 cp命令：</h4><p><code>$ cp test.js newtest.js     //复制当前目录下的 test.js 到当前目录下并命名为 newtest.js</code><br><code>$ cp ../test.html ./        //复制上一级目录下的 test.html 到当前目录下（注意这里是./，没有重命名）</code></p><h4 id="2-8-touch命令："><a href="#2-8-touch命令：" class="headerlink" title="2.8 touch命令："></a>2.8 touch命令：</h4><p><code>$ touch ./test.js          //在当前目录下创建一个名为 test.js 的文件</code></p><p><strong>[相关博文]:</strong></p><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5831284.html" target="_blank" rel="noopener">Linux常用命令大全</a></p><p><a href="https://www.cnblogs.com/caolisong/articles/741318.html" target="_blank" rel="noopener">linux常用命令大全</a></p><p><a href="https://www.cnblogs.com/Fairy-02-11/p/6196691.html" target="_blank" rel="noopener">Linux 常用命令大全</a></p><p><a href="https://www.cnblogs.com/zjh-ds/p/9576994.html" target="_blank" rel="noopener">linux命令大全</a></p><p><a href="https://www.cnblogs.com/Anderson-An/p/10146540.html" target="_blank" rel="noopener">Linux常用命令大全（非常全！！！）</a></p><p><a href="https://www.cnblogs.com/yyuyu/p/10014046.html" target="_blank" rel="noopener">这些Linux命令，让你的工作事半功倍！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;一、序言&quot;&gt;&lt;a href=&quot;#一、序言&quot; class=&quot;headerlink&quot; title=&quot;一、序言&quot;&gt;&lt;/a&gt;一、序言&lt;/h3&gt;&lt;p&gt;本文总结了windows系统下git面板操作的常用命令，仅供参考学习。如果需要了解更多，请自行百科。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>锁</title>
    <link href="http://yoursite.com/2019/01/09/%E9%94%81/"/>
    <id>http://yoursite.com/2019/01/09/锁/</id>
    <published>2019-01-09T11:51:51.000Z</published>
    <updated>2019-01-09T14:31:01.940Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>离群点检测</title>
    <link href="http://yoursite.com/2019/01/09/%E7%A6%BB%E7%BE%A4%E7%82%B9%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/01/09/离群点检测/</id>
    <published>2019-01-09T11:51:39.000Z</published>
    <updated>2019-01-09T14:32:27.758Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收机制</title>
    <link href="http://yoursite.com/2019/01/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/01/09/垃圾回收机制/</id>
    <published>2019-01-09T11:50:58.000Z</published>
    <updated>2019-01-09T14:30:43.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springmvc</title>
    <link href="http://yoursite.com/2019/01/09/springmvc/"/>
    <id>http://yoursite.com/2019/01/09/springmvc/</id>
    <published>2019-01-09T11:50:25.000Z</published>
    <updated>2019-01-09T12:01:40.346Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="SSM" scheme="http://yoursite.com/categories/SSM/"/>
    
    
      <category term="springmvc" scheme="http://yoursite.com/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://yoursite.com/2019/01/09/spring/"/>
    <id>http://yoursite.com/2019/01/09/spring/</id>
    <published>2019-01-09T11:50:14.000Z</published>
    <updated>2019-01-09T12:00:31.731Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="SSM" scheme="http://yoursite.com/categories/SSM/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>php</title>
    <link href="http://yoursite.com/2019/01/09/php/"/>
    <id>http://yoursite.com/2019/01/09/php/</id>
    <published>2019-01-09T11:49:46.000Z</published>
    <updated>2019-01-09T12:00:12.116Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="http://yoursite.com/2019/01/09/mybatis/"/>
    <id>http://yoursite.com/2019/01/09/mybatis/</id>
    <published>2019-01-09T11:49:21.000Z</published>
    <updated>2019-01-09T11:59:39.441Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="SSM" scheme="http://yoursite.com/categories/SSM/"/>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>java排序算法</title>
    <link href="http://yoursite.com/2019/01/09/java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/09/java排序算法/</id>
    <published>2019-01-09T09:15:25.000Z</published>
    <updated>2019-01-09T14:30:04.960Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><h4 id="1-1-快速排序的基本思想："><a href="#1-1-快速排序的基本思想：" class="headerlink" title="1.1 快速排序的基本思想："></a>1.1 快速排序的基本思想：</h4><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h4 id="1-2-冒泡排序的示例："><a href="#1-2-冒泡排序的示例：" class="headerlink" title="1.2 冒泡排序的示例："></a>1.2 冒泡排序的示例：</h4><p><img src="https://img-blog.csdnimg.cn/20181206114143449.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTI1NTUx,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="1-3-冒泡排序的算法实现如下-【排序后，数组从小到大排列】"><a href="#1-3-冒泡排序的算法实现如下-【排序后，数组从小到大排列】" class="headerlink" title="1.3 冒泡排序的算法实现如下:【排序后，数组从小到大排列】"></a>1.3 冒泡排序的算法实现如下:【排序后，数组从小到大排列】</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。   </span><br><span class="line">   * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </span><br><span class="line">   * 针对所有的元素重复以上的步骤，除了最后一个。</span><br><span class="line">   * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span><br><span class="line">   * @param numbers 需要排序的整型数组</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">public static void bubbleSort(int[] numbers) &#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    int size = numbers.length;</span><br><span class="line">    for(int i = 0 ; i &lt; size-1; i ++) &#123;</span><br><span class="line">       for(int j = 0 ;j &lt; size-1-i ; j++) &#123;</span><br><span class="line">          if(numbers[j] &gt; numbers[j+1]) &#123;   //交换两数位置</span><br><span class="line">           temp = numbers[j];</span><br><span class="line">           numbers[j] = numbers[j+1];</span><br><span class="line">           numbers[j+1] = temp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、快速排序"><a href="#二、快速排序" class="headerlink" title="二、快速排序"></a>二、快速排序</h3><h4 id="2-1-快速排序的基本思想："><a href="#2-1-快速排序的基本思想：" class="headerlink" title="2.1 快速排序的基本思想："></a>2.1 快速排序的基本思想：</h4><p>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。</p><h4 id="2-2-快速排序的示例："><a href="#2-2-快速排序的示例：" class="headerlink" title="2.2 快速排序的示例："></a>2.2 快速排序的示例：</h4><h5 id="2-2-1-一趟排序的过程："><a href="#2-2-1-一趟排序的过程：" class="headerlink" title="2.2.1 一趟排序的过程："></a>2.2.1 一趟排序的过程：</h5><p><img src="https://img-blog.csdnimg.cn/20181206114630379.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTI1NTUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-2-2-排序的全过程："><a href="#2-2-2-排序的全过程：" class="headerlink" title="2.2.2 排序的全过程："></a>2.2.2 排序的全过程：</h5><p><img src="https://img-blog.csdnimg.cn/20181206114652417.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTI1NTUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>把整个序列看做一个数组，把第零个位置看做中轴，和最后一个比，如果比它小交换，比它大不做任何处理；交换了以后再和小的那端比，比它小不交换，比他大交换。这样循环往复，一趟排序完成，左边就是比中轴小的，右边就是比中轴大的，然后再用分治法，分别对这两个独立的数组进行排序。</p><h4 id="2-3-代码实现如下："><a href="#2-3-代码实现如下：" class="headerlink" title="2.3 代码实现如下："></a>2.3 代码实现如下：</h4><h5 id="2-3-1-查找中轴（最低位作为中轴）所在位置"><a href="#2-3-1-查找中轴（最低位作为中轴）所在位置" class="headerlink" title="2.3.1 查找中轴（最低位作为中轴）所在位置"></a>2.3.1 查找中轴（最低位作为中轴）所在位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</span><br><span class="line">   * @param numbers 待查找数组</span><br><span class="line">   * @param low   开始位置</span><br><span class="line">   * @param high  结束位置</span><br><span class="line">   * @return  中轴所在位置</span><br><span class="line">*/</span><br><span class="line">public static int getMiddle(int[] numbers, int low,int high) &#123;</span><br><span class="line">      int temp = numbers[low];              //数组的第一个作为中轴</span><br><span class="line">      while(low &lt; high) &#123;</span><br><span class="line">       while(low &lt; high &amp;&amp; numbers[high] &gt; temp) &#123;</span><br><span class="line">           high--;</span><br><span class="line">       &#125;</span><br><span class="line">        numbers[low] = numbers[high];    //比中轴小的记录移到低端</span><br><span class="line">       while(low &lt; high &amp;&amp; numbers[low] &lt; temp)&#123;</span><br><span class="line">           low++;</span><br><span class="line">       &#125;</span><br><span class="line">       numbers[high] = numbers[low] ;       //比中轴大的记录移到高端</span><br><span class="line">      &#125;</span><br><span class="line">      numbers[low] = temp ;                  //中轴记录到尾</span><br><span class="line">      return low ;                           // 返回中轴的位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-递归形式的分治排序算法："><a href="#2-3-2-递归形式的分治排序算法：" class="headerlink" title="2.3.2 递归形式的分治排序算法："></a>2.3.2 递归形式的分治排序算法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * @param numbers 带排序数组</span><br><span class="line">   * @param low  开始位置</span><br><span class="line">   * @param high 结束位置</span><br><span class="line">*/</span><br><span class="line">public static void quickSort(int[] numbers,int low,int high)&#123;</span><br><span class="line"> if(low &lt; high)&#123;</span><br><span class="line">    int middle = getMiddle(numbers,low,high); //将numbers数组进行一分为二</span><br><span class="line">    quickSort(numbers, low, middle-1);  //对低字段表进行递归排序</span><br><span class="line">    quickSort(numbers, middle+1, high); //对高字段表进行递归排序</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-快速排序提供方法调用"><a href="#2-3-3-快速排序提供方法调用" class="headerlink" title="2.3.3 快速排序提供方法调用"></a>2.3.3 快速排序提供方法调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @param numbers 带排序数组</span><br><span class="line">*/</span><br><span class="line">public static void quick(int[] numbers)&#123;</span><br><span class="line">    if(numbers.length &gt; 0) &#123;  //查看数组是否为空</span><br><span class="line">        quickSort(numbers, 0, numbers.length-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-分析："><a href="#2-4-分析：" class="headerlink" title="2.4 分析："></a>2.4 分析：</h4><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p><h4 id="2-5-方法测试："><a href="#2-5-方法测试：" class="headerlink" title="2.5 方法测试："></a>2.5 方法测试：</h4><h5 id="2-5-1-打印函数："><a href="#2-5-1-打印函数：" class="headerlink" title="2.5.1 打印函数："></a>2.5.1 打印函数：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void printArr(int[] numbers) &#123;</span><br><span class="line">     for(int i = 0 ; i &lt; numbers.length ; i ++ ) &#123;</span><br><span class="line">       System.out.print(numbers[i] + &quot;,&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-2-测试："><a href="#2-5-2-测试：" class="headerlink" title="2.5.2 测试："></a>2.5.2 测试：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] numbers = &#123;10,20,15,0,6,7,2,1,-5,55&#125;;</span><br><span class="line">    System.out.print(&quot;排序前：&quot;);</span><br><span class="line">    printArr(numbers);</span><br><span class="line">    bubbleSort(numbers);</span><br><span class="line">    System.out.print(&quot;冒泡排序后：&quot;);</span><br><span class="line">    printArr(numbers);</span><br><span class="line">    quick(numbers);</span><br><span class="line">    System.out.print(&quot;快速排序后：&quot;);</span><br><span class="line">    printArr(numbers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-3-结果："><a href="#2-5-3-结果：" class="headerlink" title="2.5.3 结果："></a>2.5.3 结果：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">排序前：10,20,15,0,6,7,2,1,-5,55,</span><br><span class="line">冒泡排序后：-5,0,1,2,6,7,10,15,20,55,</span><br><span class="line">快速排序后：-5,0,1,2,6,7,10,15,20,55,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;一、冒泡排序&quot;&gt;&lt;a href=&quot;#一、冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;一、冒泡排序&quot;&gt;&lt;/a&gt;一、冒泡排序&lt;/h3&gt;&lt;h4 id=&quot;1-1-快速排序的基本思想：&quot;&gt;&lt;a href=&quot;#1-1-快速排序的基本思想：&quot; cl
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>DOS命令</title>
    <link href="http://yoursite.com/2019/01/09/DOS%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/01/09/DOS命令/</id>
    <published>2019-01-09T09:15:25.000Z</published>
    <updated>2019-01-09T14:16:25.663Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="1-用set-password命令："><a href="#1-用set-password命令：" class="headerlink" title="1. 用set password命令："></a>1. 用set password命令：</h4><p><code>mysql -u root</code><br><code>mysql&gt; SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;newpass&#39;);</code></p><h4 id="2-查看端口号："><a href="#2-查看端口号：" class="headerlink" title="2. 查看端口号："></a>2. 查看端口号：</h4><h5 id="netstat-ano"><a href="#netstat-ano" class="headerlink" title="netstat -ano"></a><code>netstat -ano</code></h5><h4 id="3-连接远程服务器："><a href="#3-连接远程服务器：" class="headerlink" title="3. 连接远程服务器："></a>3. 连接远程服务器：</h4><p><code>mstsc</code></p><h4 id="4-查看本机ip地址："><a href="#4-查看本机ip地址：" class="headerlink" title="4. 查看本机ip地址："></a>4. 查看本机ip地址：</h4><p><code>ipconfig/all</code></p><h4 id="5-将mysql所有权赋予root账户："><a href="#5-将mysql所有权赋予root账户：" class="headerlink" title="5. 将mysql所有权赋予root账户："></a>5. 将mysql所有权赋予root账户：</h4><p><code>grant select,update,insert,delete on *.* to root@127.0.0.1 identified by &quot;root&quot;;</code></p><h4 id="6-使操作生效："><a href="#6-使操作生效：" class="headerlink" title="6. 使操作生效："></a>6. 使操作生效：</h4><p><code>flush privileges</code></p><h4 id="7-创建账户root，密码为root："><a href="#7-创建账户root，密码为root：" class="headerlink" title="7. 创建账户root，密码为root："></a>7. 创建账户root，密码为root：</h4><p><code>create user &#39;root&#39; identified by &#39;root&#39;；</code></p><h4 id="8-打开服务："><a href="#8-打开服务：" class="headerlink" title="8. 打开服务："></a>8. 打开服务：</h4><p><code>services.msc</code></p><h4 id="9-连接远端或本地ip-端口号："><a href="#9-连接远端或本地ip-端口号：" class="headerlink" title="9. 连接远端或本地ip 端口号："></a>9. 连接远端或本地ip 端口号：</h4><p><code>telnet IP 端口号</code><br><code>Ctrl+]  回车（显示回显）</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;1-用set-password命令：&quot;&gt;&lt;a href=&quot;#1-用set-password命令：&quot; class=&quot;headerlink&quot; title=&quot;1. 用set password命令：&quot;&gt;&lt;/a&gt;1. 用set password命令：&lt;/h4&gt;&lt;p
      
    
    </summary>
    
      <category term="windows" scheme="http://yoursite.com/categories/windows/"/>
    
    
      <category term="DOS" scheme="http://yoursite.com/tags/DOS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo命令</title>
    <link href="http://yoursite.com/2019/01/09/Hexo%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/01/09/Hexo命令/</id>
    <published>2019-01-09T07:46:19.000Z</published>
    <updated>2019-01-09T14:16:50.891Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="1-常用hexo命令"><a href="#1-常用hexo命令" class="headerlink" title="1. 常用hexo命令"></a>1. 常用hexo命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><h4 id="2-缩写："><a href="#2-缩写：" class="headerlink" title="2. 缩写："></a>2. 缩写：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h4 id="3-组合命令："><a href="#3-组合命令：" class="headerlink" title="3. 组合命令："></a>3. 组合命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;1-常用hexo命令&quot;&gt;&lt;a href=&quot;#1-常用hexo命令&quot; class=&quot;headerlink&quot; title=&quot;1. 常用hexo命令&quot;&gt;&lt;/a&gt;1. 常用hexo命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="GitHub" scheme="http://yoursite.com/categories/GitHub/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
